{"meta": {"title": "Utility-Based CSS", "author": "Jeremy Greer", "date": "Sun May 20 14:15:07 EDT 2018"}, "content": "date: Sun May 20 14:15:07 EDT 2018\ntitle: Utility-Based CSS\nauthor: Jeremy Greer\n- ---\n\n\nI'm noodling over the problem.  It seems like it's a good idea in as much as you\ncan be very expressive with the styles and insulate elements from unexpected CSS\nchanges.\n\nBut what about this site?\n\nI'm just starting this and I don't want to lock into a specific style.  The\nthreat of that prevents me from adding content.  The actual article, this bit\nyou're reading, should persist.  It's the content, not the window dressing.\n\nMaybe there's another level.\n\nPresentation (CSS)\n  Structure (HTML)\n    Content (text)\n\n- ---\n\nSo, let's ignore the content, assuming that is agnostic.  The problem really is\njust the separation of presentation and structure.\n\nIf we use really sparse class names in html, we'll need very complex CSS.  This\nis the angle all the pro-utility CSS people take.  This leads to doing all the\ndesign application in CSS, probably with an intimate knowledge of the structure.\nWhen structure changes in html, lots of work needs to be done in the CSS.  In\nsummary, the HTML can be reused, the CSS cannot.\n\nIf we use utility CSS, there are no surprises when rendering html as you've\nexplicitly said what you want to be applied in the markup.  This essentially is\ninline styles, but with the ability to use component class (think shareable\nmixins).  This keeps the CSS simple, if not redundant, and makes everything\nquite explicit.  The basic result is the CSS can be reused, but the HTML cannot.\n\nBoiling the topic down, the real question is, which will be reused?\n\n* HTML\n* CSS\n* neither\n\n- ---\n\nDRY\nuse before reuse\nKISS\nseparation of concerns\npremature optimization\neverything looks like a nail\n\n- ---\n\nIf you step back, the issue is the cost of trying out something different.  If\nyou buy in, how hard is it to undo?  Maybe this is another cool app idea.  What\nif there was a tool that allowed to you easily go back and forth?  Maybe a\nseparate layer where you could apply a class name to an element either by name\nor by utility names?  Would that help?  It seems like being explicit is always\npreferred, but you'd need some sort of composition or currying or something to\navoid the redundancy.\n\nThe compulsion for the one true solution is persistent.  I guess the real\nthing we need to do is understand the options, identify the pros/cons of each,\nand weigh those against the goals/constraints of the project.\n\n- ---\n\nI'm so enlightened.  All my answers are, \"It depends.\"\n"}